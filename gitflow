**GitHub Flow с Ветками**

Для эффективного управления разработкой проекта "Сервис жалоб" предлагается использовать **GitHub Flow** с определённой стратегией ветвления. Это позволит команде работать параллельно над различными задачами, обеспечит прозрачность процесса разработки и упростит интеграцию изменений в основную кодовую базу.

### **Стратегия Ветвления**

1. **Основная ветка (`main`)**

    - **Назначение:** Хранит стабильный, готовый к релизу код.
    - **Правила:**
        - Прямые коммиты в `main` запрещены.
        - Изменения попадают в `main` только через Pull Request (PR) после прохождения код-ревью и тестирования.
2. **Ветка разработки (`develop`)** _(опционально)_
    
    - **Назначение:** Интеграция функциональности перед слиянием в `main`.
    - **Правила:**
        - Все новые фичи и исправления вливаются в `develop`.
        - Ветка `develop` используется для тестирования интеграции нескольких функций.
3. **Фиче-ветки (`feature/RS-<номер-задачи>-краткое-описание`)**
    
    - **Назначение:** Разработка новой функциональности или исправление багов.
        
    - **Правила:**
        
        - Создаются от `develop` или `main` (если `develop` не используется).
        - Именуются по шаблону: `feature/RS-<номер-задачи>-краткое-описание`.
        - После завершения работы создаётся PR для слияния обратно в `develop` или `main`.
    - **Пример:**
        
        - `feature/RS-1-создание-жалобы`
        - `feature/RS-3-реализация-авторизации`
4. **Hotfix-ветки (`hotfix/RS-<номер-задачи>-краткое-описание`)**
    
    - **Назначение:** Срочные исправления в продакшене.
        
    - **Правила:**
        
        - Создаются от `main`.
        - После исправления проблема вливается обратно в `main` и `develop`.
        - Именуются по шаблону: `hotfix/RS-<номер-задачи>-краткое-описание`.
    - **Пример:**
        
        - `hotfix/RS-105-исправление-ошибки-авторизации`

### **Процесс Работы**

1. **Создание Фиче-ветки**
    
    - **Шаг 1:** Обновите локальную ветку `develop`.
        
        ```bash
        git checkout develop
        git pull origin develop
        ```
        
    - **Шаг 2:** Создайте новую фиче-ветку.
        
        ```bash
        git checkout -b feature/RS-<номер-задачи>-краткое-описание
        ```
        
        - **Пример:**
            
            ```bash
            git checkout -b feature/RS-1-создание-жалобы
            ```
            
2. **Разработка в Фиче-ветке**
    
    - Пишите код, решающий поставленную задачу.
        
    - Коммитьте изменения с осмысленными сообщениями, включая идентификатор задачи.
        
        ```bash
        git add .
        git commit -m "[RS-1] Реализовано создание жалобы"
        ```
        
3. **Публикация Фиче-ветки**
    
    - Отправьте ветку на удалённый репозиторий.
        
        ```bash
        git push origin feature/RS-1-создание-жалобы
        ```
        
4. **Создание Pull Request (PR)**
    
    - На GitHub создайте PR из вашей фиче-ветки в `develop`.
        
    - В заголовке PR укажите идентификатор задачи.
        
        - **Пример:** `[RS-1] Реализовано создание жалобы`
    - В описании PR:
        
        - Опишите внесённые изменения.
        - Укажите ссылку на задачу (например, "Closes RS-1").
        - Добавьте любые дополнительные комментарии или вопросы.
5. **Код-ревью и Тестирование**
    
    - Другие разработчики проверяют ваш код, оставляют комментарии.
    - После одобрения и прохождения автоматических проверок PR готов к слиянию.
6. **Слияние PR**
    
    - Сливайте PR в `develop` с помощью опции "Squash and Merge" для сохранения чистоты истории коммитов.
    - После слияния удалите фиче-ветку из удалённого репозитория.
7. **Обновление Основной Ветки**
    
    - По завершении спринта или готовности релиза создайте PR из `develop` в `main`.
    - После одобрения и прохождения всех проверок выполните слияние.

### **Правила Именования и Коммитов**

- **Именование веток:**
    
    - **Фиче-ветки:** `feature/RS-<номер-задачи>-краткое-описание`
    - **Hotfix-ветки:** `hotfix/RS-<номер-задачи>-краткое-описание`
- **Сообщения коммитов:**
    
    - Формат: `"[RS-<номер-задачи>] Краткое описание изменений"`
    - **Примеры:**
        - `[RS-2] Добавлена функция авторизации пользователя`
        - `[RS-5] Исправлена ошибка при обновлении статуса жалобы`

### **Пример Рабочего Процесса**

**Разработчик Ирина выполняет задачу RS-3: Реализация метода получения жалобы**

1. **Создаёт фиче-ветку:**
    
    ```bash
    git checkout develop
    git checkout -b feature/RS-3-получение-жалобы
    ```
    
2. **Вносит изменения и коммитит:**
    
    ```bash
    git commit -m "[RS-3] Реализован метод GET /reports/{id}"
    ```
    
3. **Публикует ветку и создаёт PR:**
    
    ```bash
    git push origin feature/RS-3-получение-жалобы
    ```
    
    - **Заголовок PR:** `[RS-3] Реализован метод GET /reports/{id}`
        
    - **Описание PR:**
        
        ```
        Реализован метод получения жалобы по ID.
        - Добавлена логика в контроллере.
        - Написаны unit-тесты.
        Closes RS-3.
        ```
        
4. **Проходит код-ревью и слияние:**
    
    - После одобрения Ирина сливает изменения в `develop`.

### **Рекомендации по Код-ревью**

- **Минимум один рецензент:** Для каждого PR требуется проверка хотя бы одним участником команды.
- **Критерии проверки:**
    - Код соответствует стандартам кодирования.
    - Есть необходимые тесты.
    - Изменения решают поставленную задачу без побочных эффектов.
    - Документация обновлена при необходимости.

### **Работа с Hotfix**

- **Сценарий:** Если обнаружена критическая ошибка в продакшене.

1. **Создаётся hotfix-ветка от `main`:**
    
    ```bash
    git checkout main
    git pull origin main
    git checkout -b hotfix/RS-105-исправление-ошибки
    ```
    
2. **Вносятся исправления и коммитятся:**
    
    ```bash
    git commit -m "[RS-105] Исправлена критическая ошибка авторизации"
    ```
    
3. **Публикация ветки и создание PR в `main`:**
    
    ```bash
    git push origin hotfix/RS-105-исправление-ошибки
    ```
    
4. **После одобрения слияние в `main` и затем в `develop`:**
    
    - Это обеспечивает синхронизацию веток.

### **Общие Правила и Рекомендации**

- **Частые коммиты:** Коммитьте небольшие, логически завершённые изменения.
- **Обновление веток:** Регулярно синхронизируйте вашу фиче-ветку с `develop`, чтобы избежать конфликтов.
- **Автоматизация:** Настройте CI/CD для автоматического запуска тестов и проверок стиля кода при каждом PR.
- **Документация:** Обновляйте документацию API и внутренние комментарии по мере добавления новой функциональности.
- **Прозрачность:** Используйте систему трекинга задач (например, Jira или Trello) и всегда связывайте коммиты и PR с соответствующими задачами.

### **Использование Аббревиатур Задач**

- **Идентификатор задачи:** `[RS-<номер-задачи>]`
    - RS — сокращение от "Report Service" (Сервис жалоб).
    - Используется в сообщениях коммитов, названиях веток и заголовках PR.
- **Примеры:**
    - **Коммит:** `[RS-8] Добавлена валидация комментариев`
    - **Ветка:** `feature/RS-12-добавление-ролей-пользователям`
    - **PR:** `[RS-15] Интеграция с Kafka`

### **Сопоставление с Проектными Задачами**

- Каждая задача из проектного плана соответствует отдельной ветке и серии коммитов.
- Это облегчает отслеживание прогресса и управление изменениями.

### **Заключение**

Следуя описанной стратегии GitHub Flow с ветками, команда сможет эффективно сотрудничать, избегать конфликтов и поддерживать высокое качество кода. Ясная структура ветвления и согласованные правила именования облегчат навигацию по репозиторию и обеспечат прозрачность процесса разработки.

**Пример структуры репозитория:**

```
main
develop
├── feature/RS-1-создание-жалобы
├── feature/RS-2-реализация-авторизации
├── feature/RS-3-получение-жалобы
├── hotfix/RS-105-исправление-ошибки
```

**Дополнительные Ресурсы:**

- [GitHub Flow](https://guides.github.com/introduction/flow/)
- [Conventional Commits](https://www.conventionalcommits.org/)
- [Git Branching Strategies](https://nvie.com/posts/a-successful-git-branching-model/)

Соблюдение этих практик поможет команде успешно реализовать проект и обеспечит лёгкую поддержку и развитие системы в будущем.
