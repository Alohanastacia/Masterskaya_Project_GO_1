// Code generated by MockGen. DO NOT EDIT.
// Source: internal/processors/complaints.go
//
// Generated by this command:
//
//	mockgen -source=internal/processors/complaints.go -destination=internal/processors/mocks/mocks.go
//

// Package mock_processors is a generated GoMock package.
package mocks

import (
	entity "complaint_service/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockComplaintsRepository is a mock of ComplaintsRepository interface.
type MockComplaintsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComplaintsRepositoryMockRecorder
	isgomock struct{}
}

// MockComplaintsRepositoryMockRecorder is the mock recorder for MockComplaintsRepository.
type MockComplaintsRepositoryMockRecorder struct {
	mock *MockComplaintsRepository
}

// NewMockComplaintsRepository creates a new mock instance.
func NewMockComplaintsRepository(ctrl *gomock.Controller) *MockComplaintsRepository {
	mock := &MockComplaintsRepository{ctrl: ctrl}
	mock.recorder = &MockComplaintsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplaintsRepository) EXPECT() *MockComplaintsRepositoryMockRecorder {
	return m.recorder
}

// CreateComplaints mocks base method.
func (m *MockComplaintsRepository) CreateComplaints(c entity.CreateComplaint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComplaints", c)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComplaints indicates an expected call of CreateComplaints.
func (mr *MockComplaintsRepositoryMockRecorder) CreateComplaints(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplaints", reflect.TypeOf((*MockComplaintsRepository)(nil).CreateComplaints), c)
}
